<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>REPL on Bitcoin Dev Kit</title>
    <link>https://test.bitcoindevkit.org/repl/</link>
    <description>Recent content in REPL on Bitcoin Dev Kit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Apr 2020 17:03:00 +0200</lastBuildDate>
    
	<atom:link href="https://test.bitcoindevkit.org/repl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installation</title>
      <link>https://test.bitcoindevkit.org/repl/installation/</link>
      <pubDate>Tue, 28 Apr 2020 17:11:29 +0200</pubDate>
      
      <guid>https://test.bitcoindevkit.org/repl/installation/</guid>
      <description>Requirements The only requirement is a Linux/macOS system with a fairly recent Rust toolchain installed. Since Linux distros tend to lag behind with updates, the quickest way to install the Rust compiler and Cargo is rustup.rs. You can head there and follow their instructions, after which you can test if everything went fine by running cargo version, which should print something like:
cargo 1.45.0 (744bd1fbb 2020-06-15) At the time of writing, the project requires cargo &amp;gt;= 1.</description>
    </item>
    
    <item>
      <title>Concept</title>
      <link>https://test.bitcoindevkit.org/repl/concept/</link>
      <pubDate>Tue, 28 Apr 2020 17:38:20 +0200</pubDate>
      
      <guid>https://test.bitcoindevkit.org/repl/concept/</guid>
      <description>Now, in order to better grasp some of the design choices made by BDK, it&amp;rsquo;s important to understand the main concept driving the development of this project, and the goal that it&amp;rsquo;s trying to achieve.
BDK is aiming first of all to be a set of libraries and tools, all meant to be very reusable and adaptable. Developers working on their own wallets or other projects that are trying to integrate Bitcoin can pick the tools they need and piece them together to prototype and quickly ship a working product.</description>
    </item>
    
    <item>
      <title>Interface</title>
      <link>https://test.bitcoindevkit.org/repl/interface/</link>
      <pubDate>Tue, 28 Apr 2020 18:20:28 +0200</pubDate>
      
      <guid>https://test.bitcoindevkit.org/repl/interface/</guid>
      <description>Remember the repl --help command you ran before? Let&amp;rsquo;s analyze its output here to figure out the interface:
Flags FLAGS: -h, --help Prints help information -v Sets the level of verbosity -V, --version Prints version information These are the optional flags that can be set with every command. The -h flag prints the help message, the -V flag only prints the version and the -v is actually ignored at the moment.</description>
    </item>
    
    <item>
      <title>Regtest</title>
      <link>https://test.bitcoindevkit.org/repl/regtest/</link>
      <pubDate>Wed, 29 Apr 2020 00:19:34 +0200</pubDate>
      
      <guid>https://test.bitcoindevkit.org/repl/regtest/</guid>
      <description>Running the REPL in regtest requires having a local Electrum server set-up. There are two main implementations, electrs in Rust and ElectrumX in Python. Since the Rust toolchain is already required to use BDK, this page will focus mostly on the former.
Electrs can be installed by running:
cargo install --git https://github.com/romanz/electrs --bin electrs Just like before, this command will probably take a while to finish.
Once it&amp;rsquo;s done, assuming you have a regtest bitcoind running in background, you can launch a new terminal and run the following command to actually start electrs:</description>
    </item>
    
    <item>
      <title>Compiler</title>
      <link>https://test.bitcoindevkit.org/repl/compiler/</link>
      <pubDate>Wed, 29 Apr 2020 12:06:50 +0200</pubDate>
      
      <guid>https://test.bitcoindevkit.org/repl/compiler/</guid>
      <description>Introduction If you want to play around with more complicated spending policies, you&amp;rsquo;ll start to find it harder and harder to manually create the descriptors. This is where the miniscript compiler comes in! The bdk library includes a very simple compiler that can produce a descriptor given a spending policy. The syntax used to encode the spending policy is very well described in this page, specifically in the &amp;ldquo;Policy to Miniscript compiler&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Playground</title>
      <link>https://test.bitcoindevkit.org/repl/playground/</link>
      <pubDate>Fri, 08 May 2020 15:42:22 +0200</pubDate>
      
      <guid>https://test.bitcoindevkit.org/repl/playground/</guid>
      <description>.error { color: orange; }   Policy Compiler     P2SH P2WSH P2SH-P2WSH    Map every alias to an existing key or generate a new one. You can also specify known keys directly in the visual editor or the policy input field.       Wallet    Descriptor   Change Descriptor (optional)          This page contains webassembly and javascript content, please enable javascript in your browser.</description>
    </item>
    
  </channel>
</rss>